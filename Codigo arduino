#include <ESP8266WiFi.h>
#include <PubSubClient.h>

// Substitua pelos seus dados de rede
const char* ssid = "Lex_Escritorio";
const char* password = "321@@753";

// Dados do servidor MQTT
const char* mqtt_server = "test.mosquitto.org";
const char* topic = "sound_data";  // Tópico atualizado

// Pino onde a saída analógica do sensor de som está conectada
const int soundSensorPinAnalog = A0;  // Pino analógico A0

WiFiClient espClient;
PubSubClient client(espClient);

void setup_wifi() {
    delay(10);
    Serial.begin(115200);
    Serial.println("Conectando ao WiFi");
    WiFi.begin(ssid, password);
    
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("Tentando conectar ao WiFi...");
    }
    Serial.println("Conectado ao WiFi");
}

void reconnect() {
    while (!client.connected()) {
        Serial.println("Tentando conexão MQTT...");
        if (client.connect("ESP8266Client")) {
            Serial.println("Conectado ao broker MQTT");
        } else {
            Serial.print("Falha, rc=");
            Serial.print(client.state());
            Serial.println(" Tentando novamente em 5 segundos");
            delay(5000);
        }
    }
}

void setup() {
    pinMode(soundSensorPinAnalog, INPUT);
    setup_wifi();
    client.setServer(mqtt_server, 1883);
}

void loop() {
    if (!client.connected()) {
        reconnect();
    }
    client.loop();

    int soundLevelAnalog = analogRead(soundSensorPinAnalog);
    Serial.print("Nível de Som Analógico: ");
    Serial.println(soundLevelAnalog);

    if (client.publish(topic, String(soundLevelAnalog).c_str(), true)) {
        Serial.println("Publicação analógica com sucesso");
    } else {
        Serial.println("Falha na publicação analógica");
    }

    delay(1000);
}
